// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pair_sort
void pair_sort(IntegerVector i, NumericVector x);
RcppExport SEXP _FeatureHashing_pair_sort(SEXP iSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    pair_sort(i, x);
    return R_NilValue;
END_RCPP
}
// merge
int merge(IntegerVector i, NumericVector x);
RcppExport SEXP _FeatureHashing_merge(SEXP iSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(merge(i, x));
    return rcpp_result_gen;
END_RCPP
}
// todgCMatrix
SEXP todgCMatrix(S4 m);
RcppExport SEXP _FeatureHashing_todgCMatrix(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(todgCMatrix(m));
    return rcpp_result_gen;
END_RCPP
}
// tomatrix
SEXP tomatrix(S4 m);
RcppExport SEXP _FeatureHashing_tomatrix(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(tomatrix(m));
    return rcpp_result_gen;
END_RCPP
}
// test_callback
SEXP test_callback(SEXP Rcallback, const std::string& input);
RcppExport SEXP _FeatureHashing_test_callback(SEXP RcallbackSEXP, SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Rcallback(RcallbackSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(test_callback(Rcallback, input));
    return rcpp_result_gen;
END_RCPP
}
// xi
IntegerVector xi(CharacterVector src);
RcppExport SEXP _FeatureHashing_xi(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(xi(src));
    return rcpp_result_gen;
END_RCPP
}
// h
IntegerVector h(CharacterVector src);
RcppExport SEXP _FeatureHashing_h(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(h(src));
    return rcpp_result_gen;
END_RCPP
}
// h2
IntegerVector h2(CharacterVector src);
RcppExport SEXP _FeatureHashing_h2(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(h2(src));
    return rcpp_result_gen;
END_RCPP
}
// hashed_model_matrix_dataframe
SEXP hashed_model_matrix_dataframe(RObject tf, DataFrame data, unsigned long hash_size, bool transpose, S4 retval, bool keep_hashing_mapping, bool is_xi, bool progress);
RcppExport SEXP _FeatureHashing_hashed_model_matrix_dataframe(SEXP tfSEXP, SEXP dataSEXP, SEXP hash_sizeSEXP, SEXP transposeSEXP, SEXP retvalSEXP, SEXP keep_hashing_mappingSEXP, SEXP is_xiSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type tf(tfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type hash_size(hash_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< S4 >::type retval(retvalSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_hashing_mapping(keep_hashing_mappingSEXP);
    Rcpp::traits::input_parameter< bool >::type is_xi(is_xiSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(hashed_model_matrix_dataframe(tf, data, hash_size, transpose, retval, keep_hashing_mapping, is_xi, progress));
    return rcpp_result_gen;
END_RCPP
}
// intToRaw
SEXP intToRaw(int src);
RcppExport SEXP _FeatureHashing_intToRaw(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(intToRaw(src));
    return rcpp_result_gen;
END_RCPP
}
// Xv
NumericVector Xv(S4 m, NumericVector v, NumericVector retval);
RcppExport SEXP _FeatureHashing_Xv(SEXP mSEXP, SEXP vSEXP, SEXP retvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type retval(retvalSEXP);
    rcpp_result_gen = Rcpp::wrap(Xv(m, v, retval));
    return rcpp_result_gen;
END_RCPP
}
// vX
NumericVector vX(NumericVector v, S4 m, NumericVector retval);
RcppExport SEXP _FeatureHashing_vX(SEXP vSEXP, SEXP mSEXP, SEXP retvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< S4 >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type retval(retvalSEXP);
    rcpp_result_gen = Rcpp::wrap(vX(v, m, retval));
    return rcpp_result_gen;
END_RCPP
}
// split_existence
SEXP split_existence(CharacterVector src, const std::string& delim);
RcppExport SEXP _FeatureHashing_split_existence(SEXP srcSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(split_existence(src, delim));
    return rcpp_result_gen;
END_RCPP
}
// split_count
SEXP split_count(CharacterVector src, const std::string& delim);
RcppExport SEXP _FeatureHashing_split_count(SEXP srcSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type src(srcSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(split_count(src, delim));
    return rcpp_result_gen;
END_RCPP
}
// selectColumn
SEXP selectColumn(S4 m, IntegerVector index, bool drop, SEXP Rretval);
RcppExport SEXP _FeatureHashing_selectColumn(SEXP mSEXP, SEXP indexSEXP, SEXP dropSEXP, SEXP RretvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type m(mSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rretval(RretvalSEXP);
    rcpp_result_gen = Rcpp::wrap(selectColumn(m, index, drop, Rretval));
    return rcpp_result_gen;
END_RCPP
}
// selectRow
SEXP selectRow(S4 m, IntegerVector index, bool drop, SEXP Rretval);
RcppExport SEXP _FeatureHashing_selectRow(SEXP mSEXP, SEXP indexSEXP, SEXP dropSEXP, SEXP RretvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type m(mSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rretval(RretvalSEXP);
    rcpp_result_gen = Rcpp::wrap(selectRow(m, index, drop, Rretval));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_callback();
RcppExport SEXP _rcpp_module_boot_split_callback();

static const R_CallMethodDef CallEntries[] = {
    {"_FeatureHashing_pair_sort", (DL_FUNC) &_FeatureHashing_pair_sort, 2},
    {"_FeatureHashing_merge", (DL_FUNC) &_FeatureHashing_merge, 2},
    {"_FeatureHashing_todgCMatrix", (DL_FUNC) &_FeatureHashing_todgCMatrix, 1},
    {"_FeatureHashing_tomatrix", (DL_FUNC) &_FeatureHashing_tomatrix, 1},
    {"_FeatureHashing_test_callback", (DL_FUNC) &_FeatureHashing_test_callback, 2},
    {"_FeatureHashing_xi", (DL_FUNC) &_FeatureHashing_xi, 1},
    {"_FeatureHashing_h", (DL_FUNC) &_FeatureHashing_h, 1},
    {"_FeatureHashing_h2", (DL_FUNC) &_FeatureHashing_h2, 1},
    {"_FeatureHashing_hashed_model_matrix_dataframe", (DL_FUNC) &_FeatureHashing_hashed_model_matrix_dataframe, 8},
    {"_FeatureHashing_intToRaw", (DL_FUNC) &_FeatureHashing_intToRaw, 1},
    {"_FeatureHashing_Xv", (DL_FUNC) &_FeatureHashing_Xv, 3},
    {"_FeatureHashing_vX", (DL_FUNC) &_FeatureHashing_vX, 3},
    {"_FeatureHashing_split_existence", (DL_FUNC) &_FeatureHashing_split_existence, 2},
    {"_FeatureHashing_split_count", (DL_FUNC) &_FeatureHashing_split_count, 2},
    {"_FeatureHashing_selectColumn", (DL_FUNC) &_FeatureHashing_selectColumn, 4},
    {"_FeatureHashing_selectRow", (DL_FUNC) &_FeatureHashing_selectRow, 4},
    {"_rcpp_module_boot_callback", (DL_FUNC) &_rcpp_module_boot_callback, 0},
    {"_rcpp_module_boot_split_callback", (DL_FUNC) &_rcpp_module_boot_split_callback, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_FeatureHashing(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
